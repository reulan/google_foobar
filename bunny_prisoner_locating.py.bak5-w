#/usr/bin/python env
#bunny_prisoner_locating.py
#mpmsimo
#9/24/16

class Point(object):
    """Creates a point class matching a coordinate and including prisoner_id."""

    def __init__(self):
        """Default constructor if point is given no values."""
        self.x = 0
        self.y = 0
        self.pid = 0

    def __init__(self, x, y):
        """Default constructor if point is given values."""
        self.x = x
        self.y = y
        self.pid = 0

    def __str__(self):
        """Prints string representation of point."""
        return ('({sx}, {sy})'.format(sx=self.x, sy=self.y))


    def change_x(self, x):
        self.x = x

    def change_y(self, y):
        self.y = y

    def change_pid(self, pid):
        if 1 <= pid <= 100000:
            self.pid = pid

    def get_pid(self):
        return str(self.pid)

def locate_bunny(b, x, y):
    """Attempts to locate a bunny in a cell row."""
    if b.x == x and b.y == y:
        return b.get_pid()
    else:
        return

def print_row_prisoners(cr):
    """For debug purposes print each bunny prisoner."""
    for p in cr:
        print p
        #print(len(cr))

def answer(x, y):
    """Given a coordinate, determine prisoner ID range, and give ID."""
    prisoner_count = 1
    bunny_found = False
    cell_row = [] # This will be a list of points that rewrites itself to avoid memory error?

    # Lock up the first bunny
    p = Point(1, 1)
    p.change_pid(prisoner_count)
    prisoner_count += 1
    cell_row = [p]
    print_row_prisoners(cell_row)

    # Figure out how many points are before this coord, and return int.
    while not bunny_found:
        # Search for bunny, and checks if it exists.
        try:
            for bunny in cell_row:
                pid = locate_cell(bunny)
                if pid != None:
                    bunny_found = True
                    print(pid)
                    return pid
        except Exception as e:
            pass

        # If the cell row has one or follow a pattern
        print_row_prisoners(cell_row)
        for b in cell_row:
            # Create new cell for bunny, add to beginning of list (at end)
            # Add (len(cell_row)+1), y)
            if b == cell_row[0]:
                first_bunny_in_row = Point((b.y + 1), 1)
                p.change_pid(prisoner_count)
                prisoner_count += 1
            # For each point in row add 1 to x-value of point
            else:
                b.change_x(b.x + 1)
                p.change_pid(prisoner_count)
                prisoner_count += 1
            cell_row = [first_bunny_in_row] + cell_row

    # Increments like:
    # (1,1)                      = 1 for total of 1
    # (2,1), (1,2)               = 2 for total of 3
    # (3,1), (2,2), (1,3)        = 3 for total of 8
    # (4,1), (3,2), (2,3), (1,4) = 4 for total of 12

if __name__ == '__main__':
    #answer(2,2)
    #answer(3,2)
    answer(5,10)


'''
def create_matrix():
    """Create a matrix object."""
    global matrix
    if not matrix:
        matrix.append([prisoner_count])
        increment_prisoner_count()
    return matrix

def increment_cell_row():
    """Adds an additional row (list) to matrix, to represent total y value."""
    global matrix
    matrix.append([prisoner_count])
    #print('Added {pc} to new column: {c}'.format(pc=prisoner_count, c=[prisoner_count]))
    increment_prisoner_count()
    return matrix

def increment_cell_column(cell_column_length):
    """Adds a additional column to each list, representing x value."""
    global matrix
    for cc in reversed(xrange(cell_column_length)):
        matrix[cc].append(prisoner_count)
        #print('Appened {pc} to new row: {m}'.format(pc=prisoner_count, m=matrix[cc]))
        increment_prisoner_count()

def locate_cell(x, y):
    """Locates a cell where a poor bunny is held captive."""
    min_pid = 1
    max_pid = 100000

    # Since matrix is an upside down triangle, accomodate for that.
    prisoner_id = matrix[y-1][x-1]

    if min_pid <= prisoner_id <= max_pid:
        #print('Bunny in cell ({xn},{yn}) has ID {pid}.\n'.format(xn=x, yn=y, pid=str(int(prisoner_id))))
        return str(int(prisoner_id)) # Remove last increment to reveal true ID
    else:
        pass

def store_matrix(x, y):
    """Store matrix so answer function can be run multiple times without creating a new matrix."""
    global matrix
    bunny_found = False

    if not matrix:
        matrix = create_matrix()

    cell_column_length = len(matrix) # Length of list (x-axis)
    cell_row_length = len(matrix[0]) # Amount of lists (y-axis)

    while not bunny_found:
        #print('\n'.join([''.join(['{:4}'.format(item) for item in row]) for row in matrix]))
        try:
            pid = locate_cell(x, y)
            if pid != None:
                bunny_found = True
                return pid
        except Exception as e:
            pass
        for i in xrange(cell_column_length):
            increment_cell_row()
            cell_row_length = len(matrix[0]) # Amount of lists (y-axis)
            increment_cell_column(cell_column_length)
            cell_column_length = len(matrix) # Length of list (x-axis)

            #print('Searching for bunny in cell ({xn},{yn}).'.format(xn=x, yn=y))

def answer(x, y):
    """Dynamically create a matrix at will until bunny is identified."""
    store_matrix(x, y)
'''
