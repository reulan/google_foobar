#/usr/bin/python env
#bunny_prisoner_locating.py
#mpmsimo
#9/23/16

import sys
import math

def verify_number(num):
    """Ensures that a number meets the required conditions."""
    if 1 <= num <= 100000:
        #print("{n} is valid.".format(n=num))
        pass
    else:
        #print("{n} is not valid, exiting program.".format(n=num))
        sys.exit(1)

def get_matrix_size(captive_bunnies):
    """Dynamically figure out the matrix size based on amount of numbers provided."""
    psize = 0 # previous size
    csize = 0 # current size

    # Figure out how many numbers a matrix can hold.
    for i in xrange(int(math.ceil(math.sqrt(1000000)))):
    #for i in xrange(int(math.ceil(math.sqrt(100000)))):
        csize = i**2
        if csize >= captive_bunnies:
            print('Captive bunnies: {ll}\nMatrix: {s} x {s}\nCell space: {ca}\nMatrix range = {ps}-{cs}'.format(ll=captive_bunnies, s=i, ps=psize, cs=csize, ca = csize))
            # fill in zeroes, so we don't get the wrong number on accident
            if psize <=  captive_bunnies <= csize:
                return int(i)
        else:
            psize = csize

# Navigate x^x (at least) 2DArray/Matrix
# for example if x = 1 and y = 4  (1,4) then prisoner_id = 7
# Navigate through data structure: left (x plane), up (y plane)

# Assuming sys.argv's are: 1 3 6 10 2 5 9 4 8 7
# example grid
# y4 [7]
# y3 [4, 8]
# y2 [2, 5, 9]
# y1 [1, 3, 6, 10]
#     x1 x2 x3 x4

def create_matrix(id_list, matrix_size):
    """Creates a matrix based on values passed to sys.argv."""
    # Figure out matrix size 
    #matrix_size = int(math.ceil(math.sqrt(len(id_list))))

    # Create matrix of matrix_size by matrix_size (width x height)
    matrix = [[0 for w in xrange(matrix_size)] for h in xrange(matrix_size)]

    # Create counters for use with maths!
    xjc = 0 # x-value count
    yjc = 0 # y-value count

    # Reverse list so that I can pop off items to create the matrix
    id_list.reverse()

    # Populate matrix values based on list going from bottom left, incrementing right to matrix_size
    for xj in xrange(0, matrix_size):
        for yj in xrange(0, (matrix_size - yjc)):
            # Once x hits matrix_size limit, create a new row and minus yjc
            # from xj amount, meaning: matrix_size - yjc
            matrix[xj][yj] = id_list.pop()
            xjc += 1
            #print('\n({xn},{yn}) = {idlp}'.format(xn=xj+1, yn=yj+1, idlp=matrix[xj][yj]))
        yjc += 1
    #print('\n%s' % matrix)
    return matrix

def locate_cell(cell_matrix, xn, yn):
    """Navigate through the matrix to find cell location. There is no spoon."""
    if xn >= 2 and yn >= 2:
        return str(cell_matrix[xn-1][yn-1])
    else:
        return str(cell_matrix[xn][yn])

def answer(x, y):
    verify_number(x)
    verify_number(y)

    if sys.argv[1:] != None:
        # Get list of prisoner ID's.
        id_list = list(sys.argv[1:])
        #print('id_list: {idl}'.format(idl=id_list))
        matrix_size = get_matrix_size(len(id_list))
        matrix = create_matrix(id_list, matrix_size)
        prisoner_id = locate_cell(matrix, x, y)
        print(prisoner_id)
        return prisoner_id

def answer(x, y):
    # ughhhhh, just found the pattern... lets do it right this time.
    # 1,1 1,2, 2,1, 1,3, 2,2 2,3 1,4 2,

if __name__ == '__main__':
    answer(1,1)
